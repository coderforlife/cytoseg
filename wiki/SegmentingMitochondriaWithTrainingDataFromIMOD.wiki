Instructions under construction (July 2011)

Using command line on linux system:


==Create data image stack==

Convert your image data to an 8bit tif stack:
<code>
mrcbyte originalData.mrc byteData.mrc
</code>

Where origialData.mrc is the 3D image you have traced in IMOD and byteData.mrc is the name of the output file you want to use.


Convert your data to a tif stack
<code>
mkdir dataFolder
mrc2tif byteData dataFolder/file
</code>

==Create segmentation image stack==

Convert your IMOD model file to a bitmap form:

Using this command
<code> imodmop -color model data output </code>
model: model file
data: data file that goes with the model (mrc format)
output: output file (mrc format)

Here's an example:
<code>imodmop -color /ncmirdata1/rgiuly/Gutmann_mito.mod /ncmirdata4/mterada/3View/Guttman_3month_wt/Guttman_3month_wt.preali.mrc guttman.mrc</code>

For the example, you can look at the output with:
<code> 3dmod guttman.mrc </code>

Convert the output mrc file from the last step to tif's with the command mrc2tif

Here's an example, first we are creating the "folderForTiffs" folder as a folder to place our files.
<code>
mkdir folderForTiffs
mrc2tif guttman.mrc folderForTiffs/file
</code>

Use convert command (a command from Image Magick) to convert the stack to 8 bit

For example from inside the folder with the tif's (folderForTiffs in this example), you can run this to do the conversion:

{{{
mkdir folderFor8bitFiles
ls *.tif | xargs -r -t -I FILE convert FILE -type Grayscale -depth 8 folderFor8bitFiles/FILE.8bit.tif
}}}

==Running the script==

Make sure you have python installed according to instructions for installation at cytoseg.googlecode.com

You'll need python to run the scripts.

Download this file with the python scripts http://cytoseg.googlecode.com/files/cytoseg_mito_example.zip

You can download from the command line with:
<code>
wget http://cytoseg.googlecode.com/files/cytoseg_mito_example.zip
</code>

Unzip the file
<code> unzip cytoseg_mito_example.zip </code>

At your command line, go into the cytoseg/testing directory

<code>
cd cytoseg
cd testing
</code>

Create and output folder:
<code>
mkdir output
mkdir output/cytoseg_data
</code>

Run the sbfsem_batch_voxels_test.py script like this:

<code>
python sbfsem_batch_voxels_test.py input output --trainingData=test1 --trainingSeg=test2 --trainingLowerBound=1,2,3 --trainingUpperBound=4,5,6 --processingLowerBound=7,8,9 --processingUpperBound=10,11,12
</code>

input: the input folder with a stack of 8bit data image files (We created this in the "Create data image stack section" above.)

output: toplevel folder for output of the process (We created this with the mkdir command above.)

--traningData specifies the folder with training data (can be the same as input)

--trainingSeg specifies the folder with 8bit segmentation bitmap stack (We created this in the "Create segmentation image stack" section above.)

New folders and files will be created in the output folder you specified.

(Inside of the output folder, go to voxelOutput\mitochondria\composite to view your output in a convenient colorized form. This is useful for checking if the output looks correct.)

Inside of the output folder, voxelOutput\mitochondria\resized has a grayscale image of your output that can be thresholded with a program such as ImageJ to identify the structures of interest. Next, convert this output to IMOD format.

Use tif2mrc to create segmentation.mrc from the tif's in the resized folder.

==Converting autosegmentation output into IMOD model==

<code> imodauto -h 100 segmentation.mrc outputlines.mod </code>


this assumes you're got just two intensity values... if multiple values then (by default) each will go into a separate object... for liz we had to do something clever to the effect of: "imodauto -l 0 -h .06 /Users/anoske/Desktop/_liz/tiffs/slice0.mrc /Users/anoske/Desktop/_liz/tiffs/slice0.modË™
3dmod /Users/anoske/Desktop/_liz/tiffs/slice0.mrc /Users/anoske/Desktop/_liz/tiffs/slice0.mod". 
.. then you want to open it with 3dmod:

<code> 3dmod intput.rec outputlines.mod </code>

Next you'll want to mesh this by clicking: Image > ModelView... then... click Edit > Object... then Meshing and Mesh All. (this is equivalent to running "imodmesh outputlines.mod outputlines.mod"). 

Now you can save and go back to the command line. And type:

<code> imodsortsurf  outputlines.mod outputlines.mod </code>

.. this sorts the contours by the surface # they have been meshed into. And finally it sounds like you want to type:

<code> imodsortsurf -s outputlines.mod outputlines.mod </code>




=Acknowledgements=
Thanks Andrew for the instructions to convert into IMOD format.


=Etc=
Note for new users: use copy and paste heavily to speed up your work with the command line.